"""
Django settings for backend project.

Generated by 'django-admin startproject' using Django 4.2.7.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""
import os
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

APPEND_SLASH = False
# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

DEP_MODE = os.environ.get("DEP_MODE", "")
FRONTEND_HOST = os.environ.get("FRONTEND_HOST")

SECRET_KEY = os.environ.get("DJANGO_SECRET_KEY")
if SECRET_KEY is None:
    raise Exception("Missing DJANGO_SECRET_KEY env var")

REDIS_HOST = os.environ.get("REDIS_HOST")
if REDIS_HOST is None:
    raise Exception("Missing REDIS_HOST env var")
REDIS_PORT = os.environ.get("REDIS_PORT")
if REDIS_PORT is None:
    raise Exception("Missing REDIS_PORT env var")

POSTGRES_DB = os.environ.get('POSTGRES_DB')
if POSTGRES_DB is None:
    raise Exception("Missing POSTGRES_DB env var")
POSTGRES_USER = os.environ.get('POSTGRES_USER')
if POSTGRES_USER is None:
    raise Exception("Missing POSTGRES_USER env var")
POSTGRES_PASSWORD = os.environ.get('POSTGRES_PASSWORD')
if POSTGRES_PASSWORD is None:
    raise Exception("Missing POSTGRES_PASSWORD env var")
POSTGRES_HOST = os.environ.get('POSTGRES_HOST')
if POSTGRES_HOST is None:
    raise Exception("Missing POSTGRES_HOST env var")
POSTGRES_PORT = os.environ.get('POSTGRES_PORT')
if POSTGRES_PORT is None:
    raise Exception("Missing POSTGRES_PORT env var")

OAUTH_CLIENT_UID = os.environ.get('OAUTH_CLIENT_UID')
if OAUTH_CLIENT_UID is None:
    raise Exception("Missing OAUTH_CLIENT_UID env var")

OAUTH_CLIENT_SECRET = os.environ.get('OAUTH_CLIENT_SECRET')
if OAUTH_CLIENT_SECRET is None:
    raise Exception("Missing OAUTH_CLIENT_SECRET env var")

OAUTH_REDIRECT_URL = os.environ.get('OAUTH_REDIRECT_URL')
if OAUTH_REDIRECT_URL is None:
    raise Exception("Missing OAUTH_REDIRECT_URL env var")

OAUTH_TOKEN_URL = os.environ.get('OAUTH_TOKEN_URL')
if OAUTH_TOKEN_URL is None:
    raise Exception("Missing OAUTH_TOKEN_URL env var")

API_USER_INFOS_URL = os.environ.get('API_USER_INFOS_URL')
if API_USER_INFOS_URL is None:
    raise Exception("Missing API_USER_INFOS_URL env var")

# Email settings
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_USE_TLS = True

EMAIL_HOST = os.environ.get('EMAIL_HOST')
if EMAIL_HOST is None:
    raise Exception("Missing EMAIL_HOST env var")
EMAIL_FROM = os.environ.get('EMAIL_FROM')
if EMAIL_FROM is None:
    raise Exception("Missing EMAIL_FROM env var")
EMAIL_HOST_USER = os.environ.get('EMAIL_HOST_USER')
if EMAIL_HOST_USER is None:
    raise Exception("Missing EMAIL_HOST_USER env var")
EMAIL_HOST_PASSWORD = os.environ.get('EMAIL_HOST_PASSWORD')
if EMAIL_HOST_PASSWORD is None:
    raise Exception("Missing EMAIL_HOST_PASSWORD env var")
FRONTEND_URL = os.environ.get('FRONTEND_URL')
if FRONTEND_URL is None:
    raise Exception("Missing FRONTEND_URL env var")
EMAIL_PORT = 587
PHONENUMBER_DEFAULT_REGION = 'FR'

if  DEP_MODE != "production":
    CORS_ORIGIN_ALLOW_ALL = True
    ALLOWED_HOSTS = ["*"]
    DEBUG = True
else:
    DEBUG = False
    if FRONTEND_HOST is None:
        raise Exception("Missing FRONTEND_HOST env var")
    ALLOWED_HOSTS = [FRONTEND_HOST, "localhost"]

CORS_ALLOWED_CREDENTIALS = True
# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'rest_framework.authtoken',
    'user',
    'channels',
    'game',
    'corsheaders',
]

CHANNEL_LAYERS = {
    "default": {
        "BACKEND": "channels_redis.core.RedisChannelLayer",
        "CONFIG": {
            "hosts": [(REDIS_HOST, REDIS_PORT)],
            "capacity": 2000, # default 100
            "expiry": 1, # default 60
        },
    },
}

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'backend.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'backend.wsgi.application'
ASGI_APPLICATION = 'backend.asgi.application'


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': POSTGRES_DB,
        'USER': POSTGRES_USER,
        'PASSWORD': POSTGRES_PASSWORD,
        'HOST': POSTGRES_HOST,
        'PORT': POSTGRES_PORT,

    }
}

# custom user model
AUTH_USER_MODEL = 'user.User'

REST_FRAMEWORK = {
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',
    ],
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.TokenAuthentication',
    ],
    'DEFAULT_RENDERER_CLASSES': [
        'rest_framework.renderers.JSONRenderer',
    ],
}

# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'